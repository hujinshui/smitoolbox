classdef gen_model
    % The base class for generative model
    %
    % In general, the math formulation of the model can be written as
    %
    %   theta_k | alpha_1, alpha_2, ... ~ hyper model, for k = 1, ..., K
    %   x_i | {theta_k}, z_i, ... ~ generative model,  for i = 1, ..., n
    %
    %   Here, z_i indicates which parameter theta is used to 
    %   generate x_i.
    %
    
    % Created by Dahua Lin, on Aug 26, 2011
    %
    
    
    %% methods to retrieve basic information
    
    methods(Abstract)        
        siz = get_param_size(model);
        % Gets the size of each parameter
        
        siz = get_product_size(model);
        % Gets the size of each product
        
        n = get_num_hyper_params(model);
        % Gets the number of hyper parameters
        
        siz = get_hyper_param_size(model, i);
        % Gets the size of the i-th hyper-parameter.
        
        name = get_hyper_param_name(model, i);
        % Gets the name of the i-th hyper-parameter.        
                
    end    
    
    %% evaluation methods
    
    methods(Abstract)
    
        lpri = logpri(model, alpha, Theta, hmap)
        % Evaluates the log-prior of given parameters
        %
        %   lpri = model.logpri(alpha, Theta);
        %
        %       evaluates the log-prior of the parameters in Theta
        %       with respect to the prior model whose parameters
        %       are from Alpha.
        %
        %       Suppose there are K parameters packed in Theta, then
        %       lpri should be a 1 x K row vector, with lpri(k) giving
        %       the log-prior value for the k-th parameter.  
        %
        %   lpri = model.logpri(Alpha, Theta, hmap);
        %       
        %       evaluates the log-prior of the parameters in Theta
        %       with respect to multi prior parameters. In particular,
        %       the log-prior value of the k-th parameter in Theta 
        %       should be estimated based on hmap(k)-th hyper-parameters.
        %
        
        Llik = loglik(model, Theta, X)
        % Evaluates the generative log-likelihood 
        %
        %   Llik = model.loglik(Theta, X);
        %
        %       evaluates the log-likelihood of the product samples in X
        %       with respect to the model with parameters given in Theta.
        %
        %       Suppose there are m params in Theta and n samples in X,
        %       then Llik should be an m x n matrix, with Llik(k, i)
        %       being the log-likelihood value of the i-th sample with 
        %       respect to the k-th parameter.
        %
        
    end
        
    
    %% sampling & inference methods
    
    methods(Abstract)
               
        X = generate(model, Theta, n, g);
        % Generates product samples given parameters and labels
        %
        %   X = model.generate(theta, n);
        %
        %       generates n sample from the model with parameter theta.
        %
        %   X = model.generate(Theta, n, g);
        %
        %       generates n samples from multi-models whose parameters 
        %       are given by Theta based on the grouping given in g, a 
        %       cell array of index vectors. 
        %
        %       In particular, the samples with indices in g{k} should
        %       be generated by the k-th model. Here, n is the total
        %       number of samples.
        %
        
        Theta = mapest_params(model, X, Z, Alpha, hmap);
        % Performs Maximum-a-posteriori (MAP) estimation of parameters
        %
        %   theta = model.mapest_params(X);
        %
        %   theta = model.mapest_params(X, [], alpha);
        %
        %       Performs MAP estimation of the parameter based on 
        %       a given set of samples, each with weight 1. 
        %
        %       Alpha is a cell array comprised of all hyper parameters.
        %       When num_hyper_params == 0, Alpha should be empty or 
        %       omitted, and this function should perform MLE estimation.
        %
        %   Theta = model.mapest_params(X, W, alpha);
        %
        %       Performs MAP estimation based on weighted samples.
        %
        %       W should be a K x n matrix, where W(k, i) is the
        %       contribution weight of the i-th sample to the k-th model.
        %       In output, Theta is comprised of K parameters.
        %
        %   Theta = model.mapest_params(X, g, alpha);
        %
        %       Performs MAP estimation based on grouped samples.
        %       Here, g is a cell array of index vectors, and the k-th
        %       model parameter should be estimated based on the samples
        %       whose index is in g{k}.
        %
        %   Theta = model.mapest_params(X, .., Alpha, hmap);
        %
        %       Performs MAP estimation with hyper-map. Here, hmap is
        %       an index vector of length K, and Alpha is a cell matrix,
        %       of which each column gives a set of hyper-params.
        %
        %       The estimation of the k-th model parameter should be
        %       based on hmap(k)-th hyper-parameter(s) contained in
        %       Alpha. 
        %
        
        Theta = sample_params(model, X, Z, Alpha, hmap);
        % Samples from the posterior distribution of parameters
        %
        %   theta = model.sample_params(X, [], alpha);
        %
        %       samples a parameter theta, given a set of data X and
        %       the hyper parameter alpha.
        %
        %   theta = model.sample_params(X, [], alpha, n);
        %   theta = model.sample_params(X, w, alpha, n);
        %       
        %       samples n parameters from a given set of data X,
        %       which may or may not be weighted, and a single
        %       hyper-parameter alpha. 
        %
        %   Theta = model.sample_params(X, W, alpha);
        %   Theta = model.sample_params(X, g, alpha);
        %   Theta = model.sample_params(X, .., Alpha, hmap);
        %
        %       samples K parameters (packed in Theta as output), 
        %       given a weighted/grouped set of data X.
        %       hyper-map can also be used here.                
        %
        
    end
    
       
end



