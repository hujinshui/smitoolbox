# The configuation of modules of SMI toolbox

[base]

: The base module comprises basic functions and classes to support common 
calculation and data manipulation. It also serves as the foundation in 
implementing other modules.

.depends = { }

.subpaths = { base/utils, base/data, base/matrix, base/metrics }

.mex = { 
    # for data    
    intcount:       base/data/intcount.cpp
    intgroup:       base/data/intgroup.cpp    
    valueseg:       base/data/valueseg.cpp
    aggreg_cimp:    base/data/private/aggreg_cimp.cpp
    pieces_cimp:    base/data/private/pieces_cimp.cpp

    fast_median_cimp:   base/data/private/fast_median_cimp.cpp
    top_k_cimp:         base/data/private/top_k_cimp.cpp
    wmedian_cimp:       base/data/private/wmedian_cimp.cpp

    # for matrix
    repnum:         base/matrix/repnum.cpp

    inv2x2:         base/matrix/inv2x2.cpp
    det2x2:         base/matrix/det2x2.cpp
    trace2x2:       base/matrix/trace2x2.cpp
    sqrtm2x2:       base/matrix/sqrtm2x2.cpp
    polarm2x2:      base/matrix/polarm2x2.cpp
    chol2x2:        base/matrix/chol2x2.cpp
    mtimes_sm2v2:   base/matrix/mtimes_sm2v2.cpp

    # for metrics
    pwLpdist:       base/metrics/pwLpdist.cpp    
    pwhamdist:      base/metrics/pwhamdist.cpp
    safedot:        base/metrics/safedot.cpp

    # for utils
    rpick_merge_new:    base/utils/private/rpick_merge_new.cpp
}


[optim]

: The optim module comprises classes and functions for optimization,
including generic nonlinear optimization, linear programming, and
quadratic programming.

.depends = { base }
.subpaths = { optim/nonlin, optim/lpqp }

.mex = {
    # for lpqp
    qpps: optim/lpqp/qpps.cpp
}


[graph]

: The graph module comprises classes and functions for graph construction,
and manipulation. This module implements some graph theoretical algorithms, 
graph cut, and some algorithms based on spectral graph theory.

.depends = { base }
.subpaths = { graph/common, graph/grid, graph/mincut, 
              graph/spectral, graph/manifold }


.mex = {
    # for common
    gr_bfs_cimp:        graph/common/private/gr_bfs_cimp.cpp
    gr_bfs_trees_cimp:  graph/common/private/gr_bfs_trees_cimp.cpp
    gr_dfs_cimp:        graph/common/private/gr_dfs_cimp.cpp 
    gr_toposort_cimp:   graph/common/private/gr_toposort_cimp.cpp
    gr_conncomp_cimp:   graph/common/private/gr_conncomp_cimp.cpp
    gr_dijkstra_cimp:   graph/common/private/gr_dijkstra_cimp.cpp
    gr_kruskal_cimp:    graph/common/private/gr_kruskal_cimp.cpp
    gr_prim_cimp:       graph/common/private/gr_prim_cimp.cpp
    
    knng_cimp:          graph/common/private/knng_cimp.cpp

    # for mincut
    mincut_kolmogorov_cimp:  graph/mincut/private/mincut_kolmogorov_cimp.cpp
}


[classics]

: The classics module comprises some classic algorithm in machine 
learning, including those for dimension reduction, classification,
regression, and clustering.

.depends = { base, optim }

.subpaths = { classics/common, classics/subspace, classics/cluster, classics/regression }


[pmodels]

: The pmodels module comprises classes and functions for probabilistic
modeling and inference. 

.depends = { base, graph }

.subpaths = { pmodels/common, pmodels/ddistr, pmodels/gauss, pmodels/mixmodel }

.mex = {
    # for ddistr
    ddsample_cimp:      pmodels/ddistr/private/ddsample_cimp.cpp

    # for gauss
    gafvs_cimp:         pmodels/gauss/private/gafvs_cimp.cpp
    gatrwa_cimp:        pmodels/gauss/private/gatrwa_cimp.cpp
}



