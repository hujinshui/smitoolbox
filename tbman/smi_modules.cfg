# The configuation of modules of SMI toolbox

[base]

: The base module comprises basic functions and classes to support common 
calculation and data manipulation. It also serves as the foundation in 
implementing other modules.

.depends = { }

.subpaths = { base/utils, base/data, base/matrix, 
              base/pdmat, base/metrics, base/tests }

.mex = { 
    # for data    
    intcount:       base/data/intcount.cpp
    intgroup:       base/data/intgroup.cpp    
    valueseg:       base/data/valueseg.cpp
    merge_sorted:   base/data/merge_sorted.cpp
    aggreg_cimp:    base/data/private/aggreg_cimp.cpp
    pieces_cimp:    base/data/private/pieces_cimp.cpp

    fast_median_cimp:   base/data/private/fast_median_cimp.cpp
    top_k_cimp:         base/data/private/top_k_cimp.cpp
    wmedian_cimp:       base/data/private/wmedian_cimp.cpp

    # for matrix
    repnum:         base/matrix/repnum.cpp

    inv2x2:         base/matrix/inv2x2.cpp
    det2x2:         base/matrix/det2x2.cpp
    trace2x2:       base/matrix/trace2x2.cpp
    sqrtm2x2:       base/matrix/sqrtm2x2.cpp
    polarm2x2:      base/matrix/polarm2x2.cpp
    chol2x2:        base/matrix/chol2x2.cpp
    mtimes_sm2v2:   base/matrix/mtimes_sm2v2.cpp
}


[optim]

: The optim module comprises classes and functions for optimization,
including generic nonlinear optimization, linear programming, and
quadratic programming.

.depends = { base }
.subpaths = { optim/nonlin, optim/lpqp, optim/adaptor }

.mex = {
    # for lpqp
    qpps: optim/lpqp/qpps.cpp
}


[graph]

: The graph module comprises classes and functions for graph construction,
and manipulation. This module implements some graph theoretical algorithms, 
graph cut, and some algorithms based on spectral graph theory.

.depends = { base }
.subpaths = { graph/common, graph/algs, graph/flows, graph/spectral }

.mex = {
    # for common
    gr_nbs_cimp:   graph/common/private/gr_nbs_cimp.cpp

    # for algs
    gr_flood_cimp:          graph/algs/private/gr_flood_cimp.cpp
    gr_is_connected_cimp:   graph/algs/private/gr_is_connected_cimp.cpp
    gr_conncomps_cimp:      graph/algs/private/gr_conncomps_cimp.cpp
    gr_dijkstra_cimp:       graph/algs/private/gr_dijkstra_cimp.cpp
    gr_kruskal_cimp:        graph/algs/private/gr_kruskal_cimp.cpp
    gr_prim_cimp:           graph/algs/private/gr_prim_cimp.cpp

    # for flows
    kolmogorov_mincut_cimp:     graph/flows/private/kolmogorov_mincut_cimp.cpp
}


[classics]

: The classics module comprises some classic algorithm in machine 
learning, including those for dimension reduction, classification,
regression, and clustering.

.depends = { base, optim }

.subpaths = { classics/classification, classics/subspace, classics/kernels, 
              classics/cluster, classics/regression, classics/svm }

.mex = {
    # for classification
    knnc_cimp:      classics/classification/private/knnc_cimp.cpp
}


[pmodels]

: The pmodels module comprises classes and functions for probabilistic
modeling and inference. 

.depends = { base, graph, frmwork }

.subpaths = { pmodels/common, pmodels/ddistr,
              pmodels/gauss, pmodels/gamma, 
              pmodels/mixmodel, pmodels/markov, 
              pmodels/dp, pmodels/tests }

.mex = {
    # for common
    randpick_cimp:      pmodels/common/private/randpick_cimp.cpp

    # for ddistr
    ddsample_cimp:      pmodels/ddistr/private/ddsample_cimp.cpp

    # for gamma
    wishartd_sample_cimp:   pmodels/gamma/private/wishartd_sample_cimp.cpp

    # for markov
    hmm_forward_cimp:   pmodels/markov/private/hmm_forward_cimp.cpp
    hmm_backward_cimp:  pmodels/markov/private/hmm_backward_cimp.cpp
    chain_bp_cimp:      pmodels/markov/private/chain_bp_cimp.cpp
    chain_viterbi_cimp: pmodels/markov/private/chain_viterbi_cimp.cpp

    # for dp
    crpsim_cimp:        pmodels/dp/private/crpsim_cimp.cpp
    dpmm_redraw_labels: pmodels/dp/private/dpmm_redraw_labels.cpp
}









